package com.arpit.model;


import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * Site Value Object.
  * This class is value object representing database table site
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class Site implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int site_id;
    private String name;
    private String city;
    private java.sql.Date starting_date;
    private java.sql.Date ending_date;
    private int number_of_labours;
    private int manager_id;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public Site () {

    }

    public Site (int site_idIn) {

          this.site_id = site_idIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getSite_id() {
          return this.site_id;
    }
    public void setSite_id(int site_idIn) {
          this.site_id = site_idIn;
    }

    public String getName() {
          return this.name;
    }
    public void setName(String nameIn) {
          this.name = nameIn;
    }

    public String getCity() {
          return this.city;
    }
    public void setCity(String cityIn) {
          this.city = cityIn;
    }

    public java.sql.Date getStarting_date() {
          return this.starting_date;
    }
    public void setStarting_date(java.sql.Date starting_dateIn) {
          this.starting_date = starting_dateIn;
    }

    public java.sql.Date getEnding_date() {
          return this.ending_date;
    }
    public void setEnding_date(java.sql.Date ending_dateIn) {
          this.ending_date = ending_dateIn;
    }

    public int getNumber_of_labours() {
          return this.number_of_labours;
    }
    public void setNumber_of_labours(int number_of_laboursIn) {
          this.number_of_labours = number_of_laboursIn;
    }

    public int getManager_id() {
          return this.manager_id;
    }
    public void setManager_id(int manager_idIn) {
          this.manager_id = manager_idIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int site_idIn,
          String nameIn,
          String cityIn,
          java.sql.Date starting_dateIn,
          java.sql.Date ending_dateIn,
          int number_of_laboursIn,
          int manager_idIn) {
          this.site_id = site_idIn;
          this.name = nameIn;
          this.city = cityIn;
          this.starting_date = starting_dateIn;
          this.ending_date = ending_dateIn;
          this.number_of_labours = number_of_laboursIn;
          this.manager_id = manager_idIn;
    }


    /** 
     * hasEqualMapping-method will compare two Site instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(Site valueObject) {

          if (valueObject.getSite_id() != this.site_id) {
                    return(false);
          }
          if (this.name == null) {
                    if (valueObject.getName() != null)
                           return(false);
          } else if (!this.name.equals(valueObject.getName())) {
                    return(false);
          }
          if (this.city == null) {
                    if (valueObject.getCity() != null)
                           return(false);
          } else if (!this.city.equals(valueObject.getCity())) {
                    return(false);
          }
          if (this.starting_date == null) {
                    if (valueObject.getStarting_date() != null)
                           return(false);
          } else if (!this.starting_date.equals(valueObject.getStarting_date())) {
                    return(false);
          }
          if (this.ending_date == null) {
                    if (valueObject.getEnding_date() != null)
                           return(false);
          } else if (!this.ending_date.equals(valueObject.getEnding_date())) {
                    return(false);
          }
          if (valueObject.getNumber_of_labours() != this.number_of_labours) {
                    return(false);
          }
          if (valueObject.getManager_id() != this.manager_id) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass Site, mapping to table site\n");
        out.append("Persistent attributes: \n"); 
        out.append("site_id = " + this.site_id + "\n"); 
        out.append("name = " + this.name + "\n"); 
        out.append("city = " + this.city + "\n"); 
        out.append("starting_date = " + this.starting_date + "\n"); 
        out.append("ending_date = " + this.ending_date + "\n"); 
        out.append("number_of_labours = " + this.number_of_labours + "\n"); 
        out.append("manager_id = " + this.manager_id + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        Site cloned = new Site();

        cloned.setSite_id(this.site_id); 
        if (this.name != null)
             cloned.setName(new String(this.name)); 
        if (this.city != null)
             cloned.setCity(new String(this.city)); 
        if (this.starting_date != null)
             cloned.setStarting_date((java.sql.Date)this.starting_date.clone()); 
        if (this.ending_date != null)
             cloned.setEnding_date((java.sql.Date)this.ending_date.clone()); 
        cloned.setNumber_of_labours(this.number_of_labours); 
        cloned.setManager_id(this.manager_id); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}